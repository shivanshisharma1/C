UNSIGNED AND SIGNED DATA TYPE
------------------------------

Signed Variables:
-----------------

*Signed variables  allow you to represent both positive and negative numbers.
*They use a sign bit (The most significant bit) to indicate the sign
 (positive or negative).

                               -*-*-*-*-*-*- 
example program 1:
------------------

#include <stdio.h>
int main() {
    char c = 127; // Initialize c with the maximum positive value (127)
    c = c + 1;    // Increment c by 1
    printf("Value of c after overflow: %d\n", c);

    return 0;
}
                              -*-*-*-*-*-*-

output :
--------
  Value of c after overflow: -128
                              -*-*-*-*-*-*-

example program 2
-----------------

#include <stdio.h>

int main() {
    char c = -1; 
    c = c + 1;    // Increment c by 1

    printf("Value of c after overflow: %d\n", c);

    return 0;
}
                              -*-*-*-*-*-*-
output:
--------
Value of c after overflow: 0
                              -*-*-*-*-*-*-


 Unsigned Variables: 
---------------------

*Unsigned variables only allow you to represent positive numbers and zero.
* In unsigned variable the most significant number which is 1 (in 10000000)
is not consider hence value always comes positive 
* They do not have a sign bit, so they cannot represent negative values.


                              -*-*-*-*-*-*-

  example program 3 :
-----------------------

  #include <stdio.h>
 
  int main() {
 
      unsigned char c = 255; // Initialize c with the maximum value (255)
      c = c + 1;             // Increment c by 1
      printf("Value of c after overflow: %u\n", c);
     return 0;
  }
                                   -*-*-*-*-*-*-

  output:
  Value of c after overflow: 0

                                   -*-*-*-*-*-*-

now to understand the above example we first need to understand the concept of 
binary to decimal and binary addition .

binary to decimal:
------------------

suppose we have no: 10011
so now to covert it in decimal --

             1     0       1       1  
             |     |       |       |
          2^3*1 + 2^2*0 + 2^1*1 + 2^0*1
=           8  +  0    +   2    +   1   = 11

this is how we convert to decimal by first giving each 2 to the power their 
position multiplied by either 1 or 0 accordingly then add whole.


binary addition :
-----------------

* the  thing to know is that 1 + 1 = 10
* 1+1+1 = 11

example      000101
           + 000011
           ----------
        =    001000   


Now ! let's delve into the previous example program . Memory operates on bytes,
and each byte consists of 8 bits. In these 8 positions, we can have 256 
combinations (2^8) using 0 and 1, which are in binary form, allowing us to 
represent positions from 0 to 255. The sequence unfolds as follows:

signed:
------

     BINARY                                    NUMBER
    --------                                  --------
    00000000                                    0
    00000001                                    1
    00000010                                    2
    00000011                                    3
    .                                           .
    .                                           .
    .                                           .
    .                                           .
    01111111                                  (+127) 
    10000000                                  (-128) 
    .                                           .
    .                                           .
    .                                           .
    .                                           .
    11111111                                  (-1)
    00000000                                    0
                          
In the example program 1 and 2, we are under the signed data type, we are 
observing that in the first program, there are 256 (2^8) positions as the 
char type holds only one byte for both negative and positive values.
This range starts from 0 and goes up to 127 (01111111) , then on bit inincrement 
to this will result in -128(10000000)  -127..etc and then ends at -1.

________________________________________________________________________________
 
(the most sig- 1      0       0       0       0       0       0     0      
nificant num   |      |       |       |       |       |       |     |
ber)
            -2^7*1 + 2^6*0 + 2^5*0 + 2^4*0 + 2^3*0 + 2^2*0 + 2^1*0 + 2^0*0
             -128 +  0    +  0    +  0    +   0   +   0   +   0   +  0
________________________________________________________________________________


In this range, the binary position increases by 1 with each step, while the
number increases by one until the most significant number is 1, represented as
10000000. This is where the negative values begin which is after 127 at the
128 th place. Hence the first program results in -128.

In the second program, it is evident that as we progress through the sequence,
the number decreases and eventually reaches the value 1. Meanwhile, the binary
increment reaches the value 11111111. When adding, it doesn't result in
1000000000, as there is no 256th position. Consequently, the first digit 1 is
discarded and the binary starts again from 00000000. This serves as an example 
of overflow.


unsigned:
---------

     BINARY                                    NUMBER
    --------                                  --------
    00000000                                    0
    00000001                                    1
    00000010                                    2
    00000011                                    3
    .                                           .
    .                                           .
    .                                           .
    .                                           .
    01111111                                   +127 
    10000000                                   +128 
    .                                           .
    .                                           .
    .                                           .
    .                                           .
    11111111                                   255
    00000000                                    0

Moving on to the third program, the unsigned type also showcases the same number
of positions. However, as it does not accommodate negative values, its range is
from 0 to 255. Similar to the second program, the 3rd program also exhibits 
overflow, where the first value goes to the trash, causing the count to 
start from 0 again."

________________________________________________________________________________
 
               1      0       0       0       0       0       0     0      
               |      |       |       |       |       |       |     |

            +2^7*1 + 2^6*0 + 2^5*0 + 2^4*0 + 2^3*0 + 2^2*0 + 2^1*0 + 2^0*0
             +128 +  0    +  0    +  0    +   0   +   0   +   0   +  0
________________________________________________________________________________


________________________________________________________________________________
 
               1      1       1       1       1       1       1     1      
               |      |       |       |       |       |       |     |

            +2^7*1 + 2^6*1 + 2^5*1 + 2^4*1 + 2^3*1 + 2^2*1 + 2^1*1 + 2^0*1
             +128 +   64   +   32   +   16   +   8   +   4   +   2   +  1 = 255
--------------------------------------------------------------------------------

with this I hope that signed and unsigned datatype is clear to you .....

                            -*-*-*-*-*-*-

